import random
total_games = 0
total_won = 0
# File output
with open('C:\\Users\\08nat\\OneDrive - jmss.vic.edu.au\\Documents\\Investigaion Data\\BJSC.csv', 'w') as outFile:
    outFile.write("Games Played,Player Wins\n")  # CSV Header

    # Deck setup and helper functions
    card_suit = ['Hearts', 'Diamonds', 'Clubs', 'Spades']
    cards_list = {
        'Ace': -1, '2': +1, '3': +1, '4': +1, '5': +1, '6': +1, 
        '7': 0, '8': 0, '9': 0, '10': -1, 'Jack': -1, 'Queen': -1, 'King': -1
    }
    
    # Function to create and shuffle a new deck
    def create_shuffled_deck():
        deck = [(card, suit) for card in cards_list for suit in card_suit]
        random.shuffle(deck)
        return deck

    # Function to update card count
    def update_count(card, count):
        return count + cards_list[card[0]]

    # Function to assign card values
    def card_value(card):
        if card[0] in ['Jack', 'Queen', 'King']:
            return 10
        elif card[0] == 'Ace':
            return 11
        else:
            return int(card[0])

    # Run multiple simulations
    for sim in range(10000): 
        player_wins = 0
        dealer_wins = 0
        tied = 0
        games_played = 0
        count = 0

        # Initialize the deck
        deck = create_shuffled_deck()

        # Game simulation
        while len(deck) > 10:  # Ensure enough cards in the deck for a game
            games_played += 1
            dealer_hand = [deck.pop(), deck.pop()]
            player_hand = [deck.pop(), deck.pop()]
            total_games += 1

            # Update count for initial hands
            for card in dealer_hand + player_hand:
                count = update_count(card, count)

            # Player turn logic
            while sum(card_value(card) for card in player_hand) < 21:
                player_score = sum(card_value(card) for card in player_hand)
                
                # Adjusted hit/stand logic based on count and player score
                if player_score >= 17:
                    if count > 1:  # Higher count suggests more high cards, riskier to hit
                        break
                    elif player_score < 19 and count <= 1:  # Low or neutral count, safe to hit
                        new_card = deck.pop()
                        player_hand.append(new_card)
                        count = update_count(new_card, count)
                    else:
                        break
                elif player_score < 17:
                    # More aggressive hit if player_score < 17
                    new_card = deck.pop()
                    player_hand.append(new_card)
                    count = update_count(new_card, count)
                else:
                    break

            # Dealer turn logic
            while sum(card_value(card) for card in dealer_hand) < 17:
                dealer_score = sum(card_value(card) for card in dealer_hand)
                if player_score > 21:
                    break
                new_card = deck.pop()
                dealer_hand.append(new_card)
                count = update_count(new_card, count)
                if sum(card_value(card) for card in dealer_hand) > 21:
                    break

            # Calculate final scores
            dealer_score = sum(card_value(card) for card in dealer_hand)
            player_score = sum(card_value(card) for card in player_hand)

            # Determine game outcome
            if dealer_score > player_score and dealer_score <= 21:
                dealer_wins += 1
            elif player_score > dealer_score and player_score <= 21:
                player_wins += 1
                total_won +=1
            elif player_score == dealer_score <= 21:
                tied += 1
            elif player_score > 21:
                dealer_wins += 1
            elif dealer_score > 21 and player_score > 21:
                dealer_wins += 1

        # Calculate player win percentage
        player_win_percentage = (player_wins / games_played) * 100 if games_played > 0 else 0
        outFile.write(f"{games_played},{player_wins}\n")
print(f"Games Played: {total_games}\nPlayed Won: {total_won}\nWin Percentage: {(total_won/total_games) * 100}")
